# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import pcocc_pb2 as pcocc__pb2


class pcoccNodeStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.route_command = channel.unary_unary(
        '/pcoccNode/route_command',
        request_serializer=pcocc__pb2.Command.SerializeToString,
        response_deserializer=pcocc__pb2.Response.FromString,
        )
    self.exec_stream = channel.stream_stream(
        '/pcoccNode/exec_stream',
        request_serializer=pcocc__pb2.stdio.SerializeToString,
        response_deserializer=pcocc__pb2.stdio.FromString,
        )


class pcoccNodeServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def route_command(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def exec_stream(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_pcoccNodeServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'route_command': grpc.unary_unary_rpc_method_handler(
          servicer.route_command,
          request_deserializer=pcocc__pb2.Command.FromString,
          response_serializer=pcocc__pb2.Response.SerializeToString,
      ),
      'exec_stream': grpc.stream_stream_rpc_method_handler(
          servicer.exec_stream,
          request_deserializer=pcocc__pb2.stdio.FromString,
          response_serializer=pcocc__pb2.stdio.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'pcoccNode', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
